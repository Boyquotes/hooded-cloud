[gd_scene load_steps=16 format=2]

[ext_resource path="res://nodes/player.tscn" type="PackedScene" id=1]
[ext_resource path="res://nodes/checkpoint.tscn" type="PackedScene" id=2]
[ext_resource path="res://nodes/tilemap.res" type="TileSet" id=3]
[ext_resource path="res://nodes/rotating_spike.tscn" type="PackedScene" id=4]
[ext_resource path="res://nodes/orb_next_level.tscn" type="PackedScene" id=5]
[ext_resource path="res://nodes/moving_cloud.tscn" type="PackedScene" id=6]
[ext_resource path="res://sprites/bg.png" type="Texture" id=7]
[ext_resource path="res://nodes/Spikes.tscn" type="PackedScene" id=8]
[ext_resource path="res://nodes/Enemy.tscn" type="PackedScene" id=9]
[ext_resource path="res://nodes/sign.tscn" type="PackedScene" id=10]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 4000, 40 )

[sub_resource type="Animation" id=2]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("moving_cloud:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 846, -263 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("moving_cloud2:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 508, -755 ) ]
}

[sub_resource type="Animation" id=3]
resource_name = "cloud movements"
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("moving_cloud:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 846, -263 ), Vector2( 660, -263 ), Vector2( 846, -263 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("moving_cloud2:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 508, -417 ), Vector2( 508, -755 ), Vector2( 508, -417 ) ]
}

[sub_resource type="Shader" id=6]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		//text_uv = ceil(uv * resolution) / resolution;
		text_uv = ((uv * resolution)+0.23) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.0
shader_param/scanlines_width = 0.0
shader_param/grille_opacity = 0.0
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = false
shader_param/roll_speed = 8.0
shader_param/roll_size = 0.0
shader_param/roll_variation = 0.1
shader_param/distort_intensity = 0.0
shader_param/noise_opacity = 0.0
shader_param/noise_speed = 0.0
shader_param/static_noise_intensity = 0.0
shader_param/aberration = 0.0
shader_param/brightness = 1.0
shader_param/discolor = false
shader_param/warp_amount = 0.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.0

[node name="root" type="Node"]

[node name="player" parent="." instance=ExtResource( 1 )]
position = Vector2( 384, 32 )

[node name="Camera2D" type="Camera2D" parent="player"]
offset = Vector2( 40, 20 )
current = true
drag_margin_h_enabled = true
drag_margin_v_enabled = true
smoothing_speed = 4.0

[node name="death_area" type="Area2D" parent="."]
position = Vector2( 50, 550 )
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="death_area"]
position = Vector2( 2930, -30 )
shape = SubResource( 1 )

[node name="spawn_point" type="Node2D" parent="."]
position = Vector2( 384, 32 )

[node name="checkpoint" parent="." instance=ExtResource( 2 )]
position = Vector2( 3136, 192 )

[node name="screen_swoop" type="CanvasLayer" parent="."]

[node name="RotatingSpike2" parent="." instance=ExtResource( 4 )]
position = Vector2( 1344, 256 )

[node name="orb_next_level" parent="." instance=ExtResource( 5 )]
position = Vector2( 4992, -416 )

[node name="next_level" parent="orb_next_level" index="0"]
next_scene = "res://nodes/levels/end_scene.tscn"

[node name="moving_cloud" parent="." instance=ExtResource( 6 )]
position = Vector2( 846, -263 )
motion/sync_to_physics = true

[node name="moving_cloud2" parent="." instance=ExtResource( 6 )]
position = Vector2( 508, -755 )
motion/sync_to_physics = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "cloud movements"
anims/RESET = SubResource( 2 )
"anims/cloud movements" = SubResource( 3 )

[node name="PB" type="ParallaxBackground" parent="."]
scroll_base_scale = Vector2( 0.2, 0.2 )

[node name="l1" type="ParallaxLayer" parent="PB"]
motion_scale = Vector2( 1, 0.5 )
motion_mirroring = Vector2( 320, 0 )

[node name="Sprite" type="Sprite" parent="PB/l1"]
position = Vector2( 168, -104 )
texture = ExtResource( 7 )
centered = false

[node name="hzd" type="Node" parent="."]

[node name="Spikes" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1080, 96 )

[node name="Spikes14" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1096, 96 )

[node name="Spikes2" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1144, 96 )

[node name="Spikes3" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1208, 96 )

[node name="Spikes4" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1248, 96 )

[node name="Spikes13" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1256, 96 )

[node name="Spikes5" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1160, 96 )

[node name="Spikes11" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1224, 96 )

[node name="Spikes6" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1304, 96 )

[node name="Spikes7" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1352, 96 )

[node name="Spikes10" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1328, 96 )

[node name="Spikes8" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1400, 96 )

[node name="Spikes9" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1424, 96 )

[node name="Spikes12" parent="hzd" instance=ExtResource( 8 )]
position = Vector2( 1440, 96 )

[node name="Sign" parent="." instance=ExtResource( 10 )]
position = Vector2( 904, 112 )

[node name="Enemy" parent="." instance=ExtResource( 9 )]
position = Vector2( 848, 96 )

[node name="TileMap2" type="TileMap" parent="."]
tile_set = ExtResource( 3 )
cell_size = Vector2( 32, 32 )
format = 1
tile_data = PoolIntArray( -1114059, 0, 0, -1114058, 0, 0, -1114057, 0, 0, -1114056, 0, 0, -1114055, 0, 0, -1114054, 0, 0, -1114053, 0, 0, -1114052, 0, 0, -1114051, 0, 0, -1048527, 4, 0, -1048515, 0, 0, -982991, 5, 0, -982988, 3, 0, -982979, 0, 0, -917455, 5, 0, -917449, 4, 0, -917443, 0, 0, -851919, 5, 0, -851914, 0, 0, -851913, 0, 0, -851912, 0, 0, -851911, 0, 0, -851910, 0, 0, -851909, 0, 0, -851908, 0, 0, -851907, 0, 0, -786383, 5, 0, -786379, 4, 0, -786378, 0, 0, -786374, 4, 0, -786371, 0, 0, -720847, 5, 0, -720844, 4, 0, -720843, 1, 0, -720842, 0, 0, -720838, 1, 0, -720835, 0, 0, -655311, 5, 0, -655308, 1, 0, -655307, 1, 0, -655306, 0, 0, -655302, 1, 0, -655299, 0, 0, -589775, 5, 0, -589773, 0, 0, -589772, 0, 0, -589771, 0, 0, -589770, 0, 0, -589766, 1, 0, -589763, 0, 0, -524239, 5, 0, -524238, 4, 0, -524234, 4, 0, -524230, 1, 0, -524227, 0, 0, -458706, 0, 0, -458705, 0, 0, -458704, 0, 0, -458703, 0, 0, -458702, 0, 0, -458701, 0, 0, -458700, 0, 0, -458699, 0, 0, -458698, 0, 0, -458697, 0, 0, -458696, 0, 0, -458695, 0, 0, -458694, 0, 0, -458693, 0, 0, -458692, 0, 0, -458691, 0, 0, -393170, 0, 0, -327637, 4, 0, -327634, 0, 0, -262101, 1, 0, -262098, 0, 0, -196568, 4, 0, -196565, 1, 0, -196562, 0, 0, -131032, 1, 0, -131029, 1, 0, -131026, 0, 0, -65499, 4, 0, -65496, 1, 0, -65493, 1, 0, -65490, 0, 0, 37, 1, 0, 40, 1, 0, 43, 1, 0, 46, 0, 0, 65571, 4, 0, 65573, 1, 0, 65576, 1, 0, 65579, 1, 0, 65582, 0, 0, 131105, 4, 0, 131107, 1, 0, 131109, 1, 0, 131112, 1, 0, 131115, 1, 0, 131118, 0, 0, 196616, 0, 0, 196641, 1, 0, 196643, 1, 0, 196645, 1, 0, 196648, 1, 0, 196651, 1, 0, 196654, 0, 0, 262152, 0, 0, 262153, 0, 0, 262154, 0, 0, 262155, 0, 0, 262156, 0, 0, 262157, 0, 0, 262158, 0, 0, 262159, 0, 0, 262160, 0, 0, 262161, 0, 0, 262162, 0, 0, 262163, 0, 0, 262164, 0, 0, 262165, 0, 0, 262166, 0, 0, 262167, 0, 0, 262168, 0, 0, 262169, 0, 0, 262170, 0, 0, 262171, 0, 0, 262172, 0, 0, 262173, 0, 0, 262174, 0, 0, 262175, 0, 0, 262176, 0, 0, 262177, 0, 0, 262178, 0, 0, 262179, 0, 0, 262180, 0, 0, 262181, 0, 0, 262182, 0, 0, 262183, 0, 0, 262184, 0, 0, 262185, 0, 0, 262186, 0, 0, 262187, 0, 0, 262188, 0, 0, 262189, 0, 0, 262190, 0, 0 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 7 )
margin_left = 1.0
margin_right = 801.0
margin_bottom = 600.0

[editable path="orb_next_level"]
